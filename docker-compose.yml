#version: '3.8'

services:
  caddy:
    image: caddy
    networks:
      - caddy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c "python manage.py collectstatic --noinput &&
         python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/code
      - ./static:/code/static
      - ./media:/code/media
    # ports:
    #   - "8000:8000"
    environment:
      - DEBUG=True
      - PSQL_DB=django
      - PSQL_USER=django
      - PSQL_PASSWD=django
      - PSQL_HOST=postgres
    depends_on:
      - postgres
      - frontend

  frontend:
    image: node:14
    command: sh -c "cd /code/front/assets && npm install && npm run build"
    volumes:
      - .:/code
  postgres:
    image: postgres:latest  # Usa la última versión de la imagen de PostgreSQL
    container_name: postgres_server  # Nombre del contenedor para facilitar su identificación
    environment:  # Variables de entorno para configurar PostgreSQL
      POSTGRES_USER: django  # Usuario de la base de datos
      POSTGRES_PASSWORD: django  # Contraseña del usuario
      POSTGRES_DB: django  # Nombre de la base de datos
    volumes:
      - postgres_data_ramos_uc_legacy:/var/lib/postgresql/data  # Volumen persistente con el nuevo nombre

volumes:
  postgres_data_ramos_uc_legacy:
    driver: local  # Volumen local para persistir los datos
